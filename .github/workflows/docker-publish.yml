name: Build image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '48 12 * * *'
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
jobs:
  build-dnsmasq:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@7c79b598eaa33458e78e8d0d71e0a9c217dd92af
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@1237c3e3d6926ae8bfad16f64e08d259b9943637
        with:
          images: ${{ env.REGISTRY }}/oxide-one/dnsmasq

      # Setup QEMU static args
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push DNSMASQ
        uses: docker/build-push-action@v2
        with:
          context: .
          file: dnsmasq.Dockerfile
          #platforms: linux/amd64,linux/arm64,linux/ppc64le
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
  build-coredns:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout This repository
        uses: actions/checkout@v3

      - name: Checkout CoreDNS
        uses: actions/checkout@v3
        with:
          repository: 'coredns/coredns'
          ref: v1.9.1
          path: 'coredns'

      - uses: actions/setup-go@v3
        with:
          go-version: '1.17' 

      - name: "Setup Ko"
        uses: imjasonh/setup-ko@v0.4
        env:
            KO_DOCKER_REPO: ${{ env.REGISTRY }}/oxide-one/coredns

      - name: "Merge the plugins files"
        run: "cat plugin.cfg >> coredns/plugin.cfg"
      
      - name: "Generate coredns.go"
        run: "go generate coredns.go"
        working-directory: "coredns"

      - name: "Download the dependencies"
        run: "go get"
        working-directory: "coredns"

      - name: "Build CoreDNS"
        run: "ko build . --platform=all"
      